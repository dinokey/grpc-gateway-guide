// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: example/demo/v1/service/salaryService.proto

package salary

import (
	context "context"
	types "github.com/example/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SalaryServiceClient is the client API for SalaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SalaryServiceClient interface {
	UpdateSalary(ctx context.Context, in *UpdateSalaryRequest, opts ...grpc.CallOption) (*types.SalaryProto, error)
	GetSalary(ctx context.Context, in *GetSalaryRequest, opts ...grpc.CallOption) (*types.SalaryProto, error)
}

type salaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSalaryServiceClient(cc grpc.ClientConnInterface) SalaryServiceClient {
	return &salaryServiceClient{cc}
}

func (c *salaryServiceClient) UpdateSalary(ctx context.Context, in *UpdateSalaryRequest, opts ...grpc.CallOption) (*types.SalaryProto, error) {
	out := new(types.SalaryProto)
	err := c.cc.Invoke(ctx, "/example.demo.v1.SalaryService/updateSalary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *salaryServiceClient) GetSalary(ctx context.Context, in *GetSalaryRequest, opts ...grpc.CallOption) (*types.SalaryProto, error) {
	out := new(types.SalaryProto)
	err := c.cc.Invoke(ctx, "/example.demo.v1.SalaryService/getSalary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SalaryServiceServer is the server API for SalaryService service.
// All implementations must embed UnimplementedSalaryServiceServer
// for forward compatibility
type SalaryServiceServer interface {
	UpdateSalary(context.Context, *UpdateSalaryRequest) (*types.SalaryProto, error)
	GetSalary(context.Context, *GetSalaryRequest) (*types.SalaryProto, error)
	mustEmbedUnimplementedSalaryServiceServer()
}

// UnimplementedSalaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSalaryServiceServer struct {
}

func (UnimplementedSalaryServiceServer) UpdateSalary(context.Context, *UpdateSalaryRequest) (*types.SalaryProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSalary not implemented")
}
func (UnimplementedSalaryServiceServer) GetSalary(context.Context, *GetSalaryRequest) (*types.SalaryProto, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalary not implemented")
}
func (UnimplementedSalaryServiceServer) mustEmbedUnimplementedSalaryServiceServer() {}

// UnsafeSalaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SalaryServiceServer will
// result in compilation errors.
type UnsafeSalaryServiceServer interface {
	mustEmbedUnimplementedSalaryServiceServer()
}

func RegisterSalaryServiceServer(s grpc.ServiceRegistrar, srv SalaryServiceServer) {
	s.RegisterService(&SalaryService_ServiceDesc, srv)
}

func _SalaryService_UpdateSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSalaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalaryServiceServer).UpdateSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.demo.v1.SalaryService/updateSalary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalaryServiceServer).UpdateSalary(ctx, req.(*UpdateSalaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SalaryService_GetSalary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SalaryServiceServer).GetSalary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.demo.v1.SalaryService/getSalary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SalaryServiceServer).GetSalary(ctx, req.(*GetSalaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SalaryService_ServiceDesc is the grpc.ServiceDesc for SalaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SalaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.demo.v1.SalaryService",
	HandlerType: (*SalaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updateSalary",
			Handler:    _SalaryService_UpdateSalary_Handler,
		},
		{
			MethodName: "getSalary",
			Handler:    _SalaryService_GetSalary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example/demo/v1/service/salaryService.proto",
}
